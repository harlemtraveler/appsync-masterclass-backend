schema {
  query: Query
  mutation: Muatation
}

type Query {
  getMyProfile: MyProfile!

  getProfile(screenName: String!): OtherProfile!

  getTweets(userId: ID!, limits: Int!, nextToken: String): TweetsPage!
}

type Muatation {}

# we created an "interface", here named Profile, to act as base foundation for all Profile types.
# to assit with distinction between an "interface" and "type", we'll add an "I" prefix to all interface names (*similar to Java or .NET)
interface IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
}

type MyProfile implements IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
}

type OtherProfile implements IProfile{
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  following: Boolean!
  followedBy: Boolean!
}

type Tweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type Reply { # the Reply has the same basic fields as Tweet
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  # in additional to the common fields with Tweet, we need to know this is in reply to another Tweet & User
  inReplyToTweet: Tweet! # but what if we reply to a Reply? We cant just leave this return value to simply be a Tweet.
  inReplyToUser: IProfile!
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type TweetsPage {
  tweets: [Tweet!]
  nextToken: String
}