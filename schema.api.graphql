schema {
  query: Query
  mutation: Muatation
}

type Query {
  # To support image uploads (for features such as updating profile pics), we need to handle URLs as a "Type" for graphql.
  # The getImageUploadUrl query will return a S3 URL for user to then use to upload images.
  getImageUploadUrl(extension: String, contentType: String): AWSURL!

  getMyTimeline(limit: Int!, nextToken: String): TweetsPage!

  getMyProfile: MyProfile!

  getProfile(screenName: String!): OtherProfile!

  getTweets(userId: ID!, limits: Int!, nextToken: String): TweetsPage!

  getLikes(userId: ID!, limit: Int!, nextToken: String): TweetsPage!

  # on the Profile page, we need to get a list of followers & and a list of users we follow.
  getFollowers(userId: ID!, limit: Int, nextToken: String): ProfilesPage!

  getFollowing(userId: ID!, limit: Int, nextToken: String): ProfilesPage!
}

type Muatation {
  # editMyProfile will be used to edit the Profile type which possess the following fields:
  # -- name
  # -- bio
  # -- location
  # -- birthdate
  #
  #
  # To update these fields, there are two options. We can either:
  # -- define all these fields as arguments for this mutation
  # -- capture these fields as a separate "type" called "input" (the conventional graphql approach)


  editMyProfile(newProfile: ProfileInput!): MyProfile!

}

# The "input" type cannot be returned by any Query or Mutation, and can only be used as Arguements.
input ProfileInput {
  name: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
}

interface IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
}

type MyProfile implements IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
}

type OtherProfile implements IProfile{
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  following: Boolean!
  followedBy: Boolean!
}

interface ITweet {}

type Tweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type Reply implements ITweet { # the Reply has the same basic fields as Tweet
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  # in additional to the common fields with Tweet, we need to know this is in reply to another Tweet & User
  inReplyToTweet: ITweet! # but what if we reply to a Reply? We cant just leave this return value to simply be a Tweet.
  inReplyToUser: IProfile!
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

# we need to be aware that the Retweet can be replied to.
# the Reply will be delivered to the original Tweet's author, users who've retweeted it as well, and any users tagged.
type Retweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  retweetOf: ITweet!
}

type TweetsPage {
  tweets: [Tweet!]
  nextToken: String
}

type ProfilesPage {
  profiles: [IProfile!]
  nextToken: String
}